-- This script was generated by the ERD tool in pgAdmin 4. -- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN; 
CREATE TABLE IF NOT EXISTS public.events ( id serial NOT NULL, title character varying(200) 
COLLATE pg_catalog."default" NOT NULL, 
description text COLLATE pg_catalog."default", start_datetime timestamp without time zone NOT NULL, 
end_datetime timestamp without time zone NOT NULL, location character varying(100) 
COLLATE pg_catalog."default", ticket_price numeric(8, 2), total_tickets integer 
DEFAULT 0, tickets_sold integer DEFAULT 0, created_at timestamp(0) without time zone 
DEFAULT CURRENT_TIMESTAMP, organizer_id integer, CONSTRAINT events_pkey PRIMARY KEY (id) ); 

CREATE TABLE IF NOT EXISTS public.ticket_types ( id serial NOT NULL, event_id integer, type character varying(50) 
COLLATE pg_catalog."default" NOT NULL, price numeric(8, 2) NOT NULL, total_tickets integer DEFAULT 0, tickets_sold integer 
DEFAULT 0, created_at timestamp(0) without time zone DEFAULT CURRENT_TIMESTAMP, CONSTRAINT ticket_types_pkey 
PRIMARY KEY (id) ); 


CREATE TABLE IF NOT EXISTS public.tickets ( id serial NOT NULL, transaction_id integer, ticket_type_id integer, 
event_id integer, user_id integer, status character varying(20) 
COLLATE pg_catalog."default" DEFAULT 'active'::character varying, issued_at 
timestamp without time zone DEFAULT CURRENT_TIMESTAMP, owner_id integer, 
CONSTRAINT tickets_pkey PRIMARY KEY (id) ); 

CREATE TABLE IF NOT EXISTS public.transactions ( id serial NOT NULL, user_id integer, total_price numeric(10, 2) 
NOT NULL, status character varying(20) COLLATE pg_catalog."default" DEFAULT 'completed'::character varying, created_at 
timestamp without time zone DEFAULT CURRENT_TIMESTAMP, payment_method character varying(50) COLLATE pg_catalog."default", 
reference_code character varying(100) COLLATE pg_catalog."default", CONSTRAINT transactions_pkey PRIMARY KEY (id) ); 
CREATE TABLE IF NOT EXISTS public.users ( id serial NOT NULL, name character varying(100) COLLATE pg_catalog."default" 
NOT NULL, email character varying(100) COLLATE pg_catalog."default" NOT NULL, password character varying(255) COLLATE 
pg_catalog."default" NOT NULL, role character varying(20) COLLATE pg_catalog."default" DEFAULT 'user'::character varying, created_at 
timestamp(0) without time zone DEFAULT CURRENT_TIMESTAMP, CONSTRAINT users_pkey PRIMARY KEY (id), CONSTRAINT users_email_key UNIQUE (email) ); 
CREATE TABLE IF NOT EXISTS public.waitlist ( id serial NOT NULL, user_id integer, event_id integer, joined_at timestamp without time zone DEFAULT 
CURRENT_TIMESTAMP, CONSTRAINT waitlist_pkey PRIMARY KEY (id), CONSTRAINT waitlist_user_id_event_id_key UNIQUE (user_id, event_id) ); ALTER TABLE IF EXISTS 
public.events ADD CONSTRAINT events_organizer_id_fkey FOREIGN KEY (organizer_id) REFERENCES public.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE
 NO ACTION; ALTER TABLE IF EXISTS public.ticket_types ADD CONSTRAINT ticket_types_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events (id) MATCH 
 SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE; CREATE INDEX IF NOT EXISTS ticket_types_event_id_idx ON public.ticket_types(event_id); ALTER TABLE IF EXISTS 
 public.tickets ADD CONSTRAINT tickets_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;
  CREATE INDEX IF NOT EXISTS tickets_event_id_idx ON public.tickets(event_id); ALTER TABLE IF EXISTS public.tickets ADD CONSTRAINT tickets_owner_id_fkey
   FOREIGN KEY (owner_id) REFERENCES public.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION; ALTER TABLE IF EXISTS public.tickets ADD CONSTRAINT
    tickets_ticket_type_id_fkey FOREIGN KEY (ticket_type_id) REFERENCES public.ticket_types (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE; ALTER TABLE
     IF EXISTS public.tickets ADD CONSTRAINT tickets_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.transactions (id) MATCH SIMPLE ON UPDATE 
     NO ACTION ON DELETE CASCADE; ALTER TABLE IF EXISTS public.tickets ADD CONSTRAINT tickets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id)
      MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE; CREATE INDEX IF NOT EXISTS tickets_user_id_idx ON public.tickets(user_id); ALTER TABLE IF EXISTS 
      public.transactions ADD CONSTRAINT transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE
      ; CREATE INDEX IF NOT EXISTS transactions_user_id_idx ON public.transactions(user_id); ALTER TABLE IF EXISTS public.waitlist ADD CONSTRAINT waitlist_event_
      id_fkey FOREIGN KEY (event_id) REFERENCES public.events (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE; ALTER TABLE IF EXISTS public.waitlist ADD 
      CONSTRAINT waitlist_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE; END;