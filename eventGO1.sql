-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose
-- if you find any bugs, including reproduction steps.

BEGIN;

-- ======================================================
-- TABLE: events
-- ======================================================
CREATE TABLE IF NOT EXISTS public.events (
    id              serial PRIMARY KEY,
    title           varchar(200) NOT NULL,
    description     text,
    start_datetime  timestamp WITHOUT time zone NOT NULL,
    end_datetime    timestamp WITHOUT time zone NOT NULL,
    location        varchar(100),
    ticket_price    numeric(8, 2),
    total_tickets   integer DEFAULT 0,
    tickets_sold    integer DEFAULT 0,
    created_at      timestamp(0) WITHOUT time zone DEFAULT CURRENT_TIMESTAMP,
    organizer_id    integer
);

-- ======================================================
-- TABLE: ticket_types
-- ======================================================
CREATE TABLE IF NOT EXISTS public.ticket_types (
    id              serial PRIMARY KEY,
    event_id        integer,
    type            varchar(50) NOT NULL,
    price           numeric(8, 2) NOT NULL,
    total_tickets   integer DEFAULT 0,
    tickets_sold    integer DEFAULT 0,
    created_at      timestamp(0) WITHOUT time zone DEFAULT CURRENT_TIMESTAMP
);

-- ======================================================
-- TABLE: tickets
-- ======================================================
CREATE TABLE IF NOT EXISTS public.tickets (
    id              serial PRIMARY KEY,
    transaction_id  integer,
    ticket_type_id  integer,
    event_id        integer,
    user_id         integer,
    status          varchar(20) DEFAULT 'active',
    issued_at       timestamp DEFAULT CURRENT_TIMESTAMP,
    owner_id        integer
);

-- ======================================================
-- TABLE: transactions
-- ======================================================
CREATE TABLE IF NOT EXISTS public.transactions (
    id              serial PRIMARY KEY,
    user_id         integer,
    total_price     numeric(10, 2) NOT NULL,
    status          varchar(20) DEFAULT 'completed',
    created_at      timestamp DEFAULT CURRENT_TIMESTAMP,
    payment_method  varchar(50),
    reference_code  varchar(100)
);

-- ======================================================
-- TABLE: users
-- ======================================================
CREATE TABLE IF NOT EXISTS public.users (
    id              serial PRIMARY KEY,
    name            varchar(100) NOT NULL,
    email           varchar(100) NOT NULL UNIQUE,
    password        varchar(255) NOT NULL,
    role            varchar(20) DEFAULT 'user',
    created_at      timestamp(0) WITHOUT time zone DEFAULT CURRENT_TIMESTAMP
);

-- ======================================================
-- TABLE: waitlist
-- ======================================================
CREATE TABLE IF NOT EXISTS public.waitlist (
    id              serial PRIMARY KEY,
    user_id         integer,
    event_id        integer,
    joined_at       timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT waitlist_user_id_event_id_key UNIQUE (user_id, event_id)
);

-- ======================================================
-- FOREIGN KEYS & INDEXES
-- ======================================================

-- events → users
ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_organizer_id_fkey
    FOREIGN KEY (organizer_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

-- ticket_types → events
ALTER TABLE IF EXISTS public.ticket_types
    ADD CONSTRAINT ticket_types_event_id_fkey
    FOREIGN KEY (event_id)
    REFERENCES public.events (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS ticket_types_event_id_idx
    ON public.ticket_types (event_id);

-- tickets → events
ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_event_id_fkey
    FOREIGN KEY (event_id)
    REFERENCES public.events (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS tickets_event_id_idx
    ON public.tickets (event_id);

-- tickets → users (owner)
ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_owner_id_fkey
    FOREIGN KEY (owner_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

-- tickets → ticket_types
ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_ticket_type_id_fkey
    FOREIGN KEY (ticket_type_id)
    REFERENCES public.ticket_types (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

-- tickets → transactions
ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_transaction_id_fkey
    FOREIGN KEY (transaction_id)
    REFERENCES public.transactions (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

-- tickets → users (buyer)
ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS tickets_user_id_idx
    ON public.tickets (user_id);

-- transactions → users
ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS transactions_user_id_idx
    ON public.transactions (user_id);

-- waitlist → events
ALTER TABLE IF EXISTS public.waitlist
    ADD CONSTRAINT waitlist_event_id_fkey
    FOREIGN KEY (event_id)
    REFERENCES public.events (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

-- waitlist → users
ALTER TABLE IF EXISTS public.waitlist
    ADD CONSTRAINT waitlist_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES public.users (id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;
